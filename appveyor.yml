# Control file for Appveyor CI (https://www.appveyor.com/)
# Must be located in the root directory of the Git repository.

environment:
  matrix:

    - TOX_ENV: win64_py27_32
      UNIX_PATH: none
      PYTHON_CMD: python

#    - TOX_ENV: win64_py27_64
#      UNIX_PATH: none
#      PYTHON_CMD: python

#    - TOX_ENV: win64_py34_32
#      UNIX_PATH: none
#      PYTHON_CMD: python

#    - TOX_ENV: win64_py34_64
#      UNIX_PATH: none
#      PYTHON_CMD: python

#    - TOX_ENV: win64_py35_32
#      UNIX_PATH: none
#      PYTHON_CMD: python

#    - TOX_ENV: win64_py35_64
#      UNIX_PATH: none
#      PYTHON_CMD: python

#    - TOX_ENV: win64_py36_32
#      UNIX_PATH: none
#      PYTHON_CMD: python

#    - TOX_ENV: win64_py36_64
#      UNIX_PATH: none
#      PYTHON_CMD: python

#    - TOX_ENV: win64_py37_32
#      UNIX_PATH: none
#      PYTHON_CMD: python

#    - TOX_ENV: win64_py37_64
#      UNIX_PATH: none
#      PYTHON_CMD: python

# TODO: Disabled because python2.7 fails with segmentation fault
#    - TOX_ENV: cygwin32_py27
#      UNIX_PATH: C:\cygwin\bin
#      PYTHON_CMD: python2.7
#      PIP_CMD: pip

# TODO: Disabled because python2.7 exits with rc=127 even though which finds it in PATH
#    - TOX_ENV: cygwin64_py27
#      UNIX_PATH: C:\cygwin64\bin
#      PYTHON_CMD: python2.7
#      PIP_CMD: pip

    - TOX_ENV: cygwin64_py36
      UNIX_PATH: C:\cygwin64\bin
      PYTHON_CMD: python3.6m
      PIP_CMD: pip

    - TOX_ENV: msys64_py27
      UNIX_PATH: C:\msys64\usr\bin
      PYTHON_CMD: python2.7
      PIP_CMD: pip

configuration:
# These values will become the values of the PACKAGE_LEVEL env.var.
#  - minimum
  - latest

install:

  # Examine the environment
  - ver
  - set
  - dir
  - dir C:\

  - git --version
  - if %APPVEYOR_REPO_BRANCH%.==manual-ci-run. set _NEED_REBASE=true
  # This Git version requires user configuration in rebase step
  - if %_NEED_REBASE%.==true. git config user.name "dummy"
  - if %_NEED_REBASE%.==true. git config user.email "dummy@dummy"
  - if %_NEED_REBASE%.==true. git fetch origin master
  - if %_NEED_REBASE%.==true. git branch master FETCH_HEAD
  - if %_NEED_REBASE%.==true. git rebase master
  - git branch -av

  - if %APPVEYOR_REPO_BRANCH%.==manual-ci-run. set MANUAL_CI_RUN=true
  - if %APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH%.==manual-ci-run. set MANUAL_CI_RUN=true

  # Set PACKAGE_LEVEL for make
  - set PACKAGE_LEVEL=%configuration%

  # For UNIX, reduce the PATH to a minimum (to avoid blanks in directory names)
  - if not "%UNIX_PATH%"=="none" set PATH=C:\Windows\system32;C:\Windows;C:\ProgramData\chocolatey\bin

  # Add UNIX commands to the path (used for bash)
  - if not "%UNIX_PATH%"=="none" set PATH=%UNIX_PATH%;%PATH%

  # Install GNU make
  - if "%UNIX_PATH%"=="none" tools\retry choco install -y make
  - if "%UNIX_PATH%"=="none" where make
  - if "%UNIX_PATH%"=="none" make --version

  # Install OS-level prerequisite packages for pyzmq Python package
  # Note. This installs them from 'outside' of the actual UNIX env, which works.
  - if "%UNIX_PATH%"=="C:\cygwin\bin" C:\cygwin\setup-x86.exe -q -P libzmq-devel,python2-devel,python2-cython,python3-devel,python3-cython
  - if "%UNIX_PATH%"=="C:\cygwin64\bin" C:\cygwin64\setup-x86_64.exe -q -P libzmq-devel,python2-devel,python2-cython,python3-devel,python3-cython
  - if "%UNIX_PATH%"=="C:\msys64\usr\bin" C:\msys64\usr\bin\pacman.exe --sync --noconfirm --needed mingw-w64-x86_64-zeromq
  - if "%UNIX_PATH%"=="C:\msys64\usr\bin" C:\msys64\usr\bin\pacman.exe --sync --noconfirm --needed libcrypt-devel

  # Examine the commands needed further down
  - if "%UNIX_PATH%"=="none" where pip
  - if not "%UNIX_PATH%"=="none" where bash
  - if not "%UNIX_PATH%"=="none" bash --noprofile --norc -c "echo \"PATH=$PATH\""
  - if not "%UNIX_PATH%"=="none" bash --noprofile --norc -c "set -e; echo \"PYTHON_CMD=%PYTHON_CMD%\"; which -a %PYTHON_CMD%; %PYTHON_CMD% --version"

  # Install Pip, where needed
  - if "%UNIX_PATH%"=="C:\cygwin\bin" bash --noprofile --norc -c "set -e; %PYTHON_CMD% -m ensurepip; %PYTHON_CMD% -m pip install --upgrade pip setuptools wheel"
  - if "%UNIX_PATH%"=="C:\cygwin64\bin" bash --noprofile --norc -c "set -e; %PYTHON_CMD% -m ensurepip; %PYTHON_CMD% -m pip install --upgrade pip setuptools wheel"
  - if "%UNIX_PATH%"=="C:\msys64\usr\bin" set MSYSTEM=MSYS & bash --noprofile --norc -c "set -e; %PYTHON_CMD% -m ensurepip; %PYTHON_CMD% -m pip install --upgrade pip setuptools wheel"
  # - if not "%UNIX_PATH%"=="none" bash --noprofile --norc -c "set -e; echo \"PIP_CMD=%PIP_CMD%\"; which -a %PIP_CMD%; %PIP_CMD% --version"
 
  # Install Tox
  - if "%UNIX_PATH%"=="none" cmd /c "pip install tox"
  - if "%UNIX_PATH%"=="C:\cygwin\bin" bash --noprofile --norc -c "%PYTHON_CMD% -m pip install tox"
  - if "%UNIX_PATH%"=="C:\cygwin64\bin" bash --noprofile --norc -c "%PYTHON_CMD% -m pip install tox"
  - if "%UNIX_PATH%"=="C:\msys64\usr\bin" set MSYSTEM=MSYS & bash --noprofile --norc -c "%PIP_CMD% install tox"
  - if not "%UNIX_PATH%"=="none" bash --noprofile --norc -c "set -e; which -a tox; tox --version"
  
build: false

before_test:

test_script:
  - if "%UNIX_PATH%"=="none" cmd /c "tox -v -e %TOX_ENV%"
  - if "%UNIX_PATH%"=="C:\cygwin\bin" bash -c "tox -v -e %TOX_ENV%"
  - if "%UNIX_PATH%"=="C:\cygwin64\bin" bash -c "tox -v -e %TOX_ENV%"
  - if "%UNIX_PATH%"=="C:\msys64\usr\bin" set MSYSTEM=MSYS & bash -c "set -e; export LIBRARY_PATH=/mingw64/lib:/usr/lib:$LIBRARY_PATH; export CPATH=/mingw64/include:/usr/include:$CPATH; export PATH=$PATH:/mingw64/bin; tox -v -e %TOX_ENV%"
