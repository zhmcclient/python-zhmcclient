# Pip requirements file for development.
#
# The order of packages is significant, because pip processes them in the order
# of appearance.
#
# Make sure that the minimum versions required in this file are consistent with
# the minimum versions specified in minimum-constraints.txt.


# Runtime dependencies:
-r requirements.txt


# Direct dependencies:

# PyYAML pulled in by zhmcclient examples and by python-coveralls
# PyYAML 5.3 fixes narrow build error
PyYAML>=5.1; python_version == '2.7'
PyYAML>=5.1; python_version >= '3.5'


# Unit test (imports into testcases):
packaging>=17.0
funcsigs>=1.0.2; python_version < '3.3'
# pytest 5.0.0 has removed support for Python < 3.5
# pytest 4.3.1 solves an issue on Python 3 with minimum package levels
pytest>=4.3.1,<5.0.0; python_version == '2.7'
pytest>=4.3.1; python_version >= '3.5' and python_version <= '3.6'
pytest>=4.4.0; python_version >= '3.7'
testfixtures>=6.9.0
mock>=2.0.0 # BSD
# requests: covered in direct deps for installation
requests-mock>=1.6.0
requests-toolbelt>=0.7.0
# pytz: covered in requirements.txt

# Virtualenv
virtualenv>=14.0.0,!=20.0.19; python_version == '2.7'
virtualenv>=16.1.0; python_version >= '3.5' and python_version <= '3.7'
virtualenv>=20.0.0; python_version >= '3.8'

# Unit test (indirect dependencies):
# Pluggy 0.12.0 has a bug causing pytest plugins to fail loading on py38
pluggy>=0.7.1; python_version >= '2.7' and python_version <= '3.6'
pluggy>=0.13.0; python_version >= '3.7'
# decorator: covered in requirements.txt
yamlloader>=0.5.5
backports.statistics>=0.1.0; python_version == '2.7'
# FormEncode is used for xml comparisons in unit test
FormEncode>=1.3.1


# Coverage reporting (no imports, invoked via coveralls script):
coverage>=5.0
pytest-cov>=2.7.0
# coveralls 2.0 has removed support for Python 2.7
git+https://github.com/andy-maier/coveralls-python.git@andy/add-py27#egg=coveralls; python_version == '2.7'
# TODO: Remove coveralls pinning to <3.0.0 once fixed (TheKevJames/coveralls-python#252)
coveralls>=2.1.2,<3.0.0; python_version >= '3.5'
# PyYAML: covered in direct deps for development

# Safety CI by pyup.io
# safety 1.9.0 removed support for Python 2.7 (and now also enforces that)
safety>=1.8.7,<1.9.0; python_version == '2.7'
safety>=1.9.0; python_version >= '3.5'
# dparse 0.5.0 has an infinite recursion issue on Python 2.7,
#   see https://github.com/pyupio/dparse/issues/46
dparse>=0.4.1,<0.5.0; python_version == '2.7'
dparse>=0.5.1; python_version >= '3.5'

# Tox
tox>=2.5.0

# Sphinx (no imports, invoked via sphinx-build script):
# Sphinx 2.0.0 removed support for Python 2.7 and 3.4
# Sphinx 4.0.0 breaks autodocsumm and needs to be excluded
# Sphinx <4.3.0 requires docutils <0.18 due to an incompatibility
Sphinx>=1.7.6,<2.0.0; python_version == '2.7'
Sphinx>=3.5.4,!=4.0.0,<4.3.0; python_version >= '3.5'
docutils>=0.13.1,<0.18
sphinx-git>=10.1.1
GitPython>=2.1.1
sphinxcontrib-fulltoc>=1.2.0
sphinxcontrib-websupport>=1.1.2
Pygments>=2.1.3
sphinx-rtd-theme>=0.5.0
autodocsumm>=0.1.13,<0.2.0; python_version == '2.7'
autodocsumm>=0.1.13; python_version >= '3.5'

# PyLint (no imports, invoked via pylint script)
# Pylint requires astroid
# Pylint 1.x / astroid 1.x supports py27 and py34/35/36
# Pylint 2.0 / astroid 2.0 removed py27, added py37
# Pylint 2.4 / astroid 2.3 removed py34
# Issue #2673: Pinning Pylint to <2.7.0 is a circumvention for Pylint issue
#   https://github.com/PyCQA/pylint/issues/4120 that appears in Pylint 2.7.0.
pylint>=1.6.4,<2.0.0; python_version == '2.7'
pylint>=2.5.2,<2.7.0; python_version >= '3.6'
astroid>=1.4.9,<2.0.0; python_version == '2.7'
astroid>=2.4.0,<2.5.0; python_version >= '3.6'
typed-ast>=1.4.0,<1.5.0; python_version >= '3.6' and python_version < '3.8' and implementation_name=='cpython'
# Workaround: lazy-object-proxy is used by astroid, and lazy-object-proxy 1.5.0
#   dropped support for py34 but declared it as supported
# Issue #2674: lazy-object-proxy fails installing on macos/py35/minimum, because it uses
#   setuptools-scm for its setup and (up to 1.5.2) does not correctly pin setuptools-scm.
#   Not clear why this does not happen on ubuntu/windows with py35 or on py34.
#   See issue https://github.com/ionelmc/python-lazy-object-proxy/issues/51.
#   This issue is circumvented by not installing pylint/astroid on py35.
#   If and when lazy-object-proxy releases a correctly pinned 1.4.x version,
#   this circumvention can be removed again.
lazy-object-proxy>=1.4.3; python_version == '2.7'
lazy-object-proxy>=1.4.3; python_version >= '3.6'
# wrapt 1.13.0 started depending on MS Visual C++ 9.0 on Python 2.7 on Windows,
#   which is not available by default on GitHub Actions
wrapt>=1.11.2,<1.13; sys_platform == 'win32' and python_version == '2.7'
wrapt>=1.11.2; sys_platform != 'win32' and python_version == '2.7'
wrapt>=1.11.2; python_version >= '3.5'

# Flake8 and dependents (no imports, invoked via flake8 script):

flake8>=3.8.0
mccabe>=0.6.0
pycodestyle>=2.6.0
pyflakes>=2.2.0
entrypoints>=0.3.0
functools32>=3.2.3.post2; python_version == '2.7'  # technically: python_version < '3.2'

# Twine (no imports, invoked via twine script):
twine>=1.8.1
# readme-renderer 23.0 has made cmarkgfm part of extras (it fails on Cygwin)
readme-renderer>=23.0

# Jupyter Notebook (no imports, invoked via jupyter script):
jupyter>=1.0.0
ipython>=5.1.0,<6.0; python_version == '2.7'
ipython>=7.0,<7.10; python_version == '3.5'
ipython>=7.10; python_version >= '3.6'
ipykernel>=4.5.2
ipython_genutils>=0.1.0
ipywidgets>=5.2.2
jupyter_console>=5.0.0,<6.0.0; python_version == '2.7'
jupyter_console>=6.0.0; python_version >= '3.5'
jupyter_client>=4.4.0
jupyter_core>=4.2.1
nbconvert>=5.0.0
nbformat>=4.2.0
notebook>=4.3.1
pyrsistent>=0.14.0,<0.16.0; python_version == '2.7'
pyrsistent>=0.14.0; python_version >= '3.5'

# Pywin32 is used (at least?) by jupyter.
# Pywin32 version 226 needs to be excluded, see issue #1946.
# Pywin32 version 222 is inconsistent in its 32-bit/64-bit support on py37
# Pywin32 version 225+ provides wheel files for py38, but does not advertise
# py38 on Pypi. That causes pywin32==225 to fail but pywin32>=225 to work.
pywin32>=222,!=226; sys_platform == 'win32' and python_version == '2.7'
pywin32>=222,!=226; sys_platform == 'win32' and python_version >= '3.5' and python_version <= '3.6'
pywin32>=223,!=226; sys_platform == 'win32' and python_version == '3.7'
# TODO: Re-enable once pywin32 fixes its Python version advertising on Pypi
#       (see issue #1975).
# pywin32>=225,!=226; sys_platform == 'win32' and python_version >= '3.8'

# The tornado package is used by ipykernel which is used by jupyter.
# Tornado 5.0.0 and 5.0.1 rejects installation if the Python ssl module
# does not have certain symbols required by Tornado. This issue exists for
# example with Python 2.7.6 on Ubuntu 14.04, but not with Python 2.7.5 on
# RHEL 7.4. This can be checked with:
#   python -c "import ssl; ssl.SSLContext; ssl.create_default_context; ssl.match_hostname"
# Other projects have the same issue:
#   https://github.com/floydhub/dl-docker/issues/84
# The following is a circumvention of this issue that nails the tornado
# version to below 5.0 on Python 2.
# TODO: Follow up on resolution of this issue.
tornado<5.0; python_version <= '2.7'

pyzmq>=16.0.4; python_version <= '3.8'
pyzmq>=20.0.0; python_version >= '3.9'

# Aditional dependencies of examples
tabulate>=0.8.1
progressbar2>=3.12.0

# Package dependency management tools (not used by any make rules)
pipdeptree>=2.0.0
pip-check-reqs>=2.0.4,<2.1.1; python_version == '2.7'
pip-check-reqs>=2.0.4; python_version >= '3.5'

# Indirect dependencies are not specified in this file unless constraints are needed.

# The pywinpty package on Pypi does not have metadata for required python or
# dependent packages. On py27/windows/, versions >=1.0 fail to install because
# they pull in the "maturin" package which requires py>=35. See issue #772.
pywinpty>=0.5,<1.0; os_name == "nt" and python_version == '2.7'
