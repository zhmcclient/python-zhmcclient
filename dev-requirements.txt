# Pip requirements file for development.
#
# The order of packages is significant, because pip processes them in the order
# of appearance.
#
# Make sure that the minimum versions required in this file are consistent with
# the minimum versions specified in minimum-constraints.txt.


# Runtime dependencies:
-r requirements.txt


# Direct dependencies:

# PEP517 package builder, used in Makefile
build>=0.5.0


# Unit test (imports into testcases):
funcsigs>=1.0.2; python_version < '3.3'
# pytest 5.0.0 has removed support for Python < 3.5
# pytest 4.3.1 solves an issue on Python 3 with minimum package levels
pytest>=4.3.1,<5.0.0; python_version == '2.7'
pytest>=4.3.1; python_version >= '3.5' and python_version <= '3.6'
pytest>=4.4.0; python_version >= '3.7' and python_version <= '3.9'
pytest>=6.2.5; python_version >= '3.10'
testfixtures>=6.9.0
# flake8 up to 6.0.0 has not yet adjusted to the removed interfaces of importlib-metadata 5.0
importlib-metadata>=0.22,<4.3; python_version <= '3.6'
importlib-metadata>=1.1.0,<4.3; python_version >= '3.7'
mock>=2.0.0 # BSD
# requests: covered in direct deps for installation
requests-mock>=1.6.0
requests-toolbelt>=0.8.0
# more-itertools 8.11.0 does not support py35 but incorrectly installs on it
more-itertools>=4.0.0,!=8.11.0; python_version <= '3.5'
more-itertools>=4.0.0; python_version >= '3.6'
# pytz: covered in requirements.txt

# packaging is used by pytest, pip-check-reqs, sphinx
# packaging>=20.5 is needed by pip-check-reqs 2.4.3 but it requires only packaging>=16.0
# safety 2.3.5 (running only on Python >=3.6) requires packaging<22.0,>=21.0, so we need to pin it here as well
# packaging 21.0 removed support for py27,35
# packaging 22.0 removed support for py36
packaging>=20.5; python_version <= '3.5'
packaging>=21.0,<22.0; python_version >= '3.6'

# Virtualenv
# build requires virtualenv.cli_run which was added in 20.1
# virtualenv 20.0 requires six<2,>=1.12.0
virtualenv>=20.1.0

# Unit test (indirect dependencies):
# Pluggy 0.12.0 has a bug causing pytest plugins to fail loading on py38
pluggy>=0.7.1; python_version >= '2.7' and python_version <= '3.6'
pluggy>=0.13.0; python_version >= '3.7'
# decorator: covered in requirements.txt
backports.statistics>=0.1.0; python_version == '2.7'


# Coverage reporting (no imports, invoked via coveralls script):
coverage>=5.0
pytest-cov>=2.7.0
# coveralls 2.0 has removed support for Python 2.7
git+https://github.com/andy-maier/coveralls-python.git@andy/add-py27#egg=coveralls; python_version == '2.7'
# TODO: Remove coveralls pinning to <3.0.0 once fixed (TheKevJames/coveralls-python#252)
coveralls>=2.1.2,<3.0.0; python_version >= '3.5'
# PyYAML: covered in direct deps for development

# Safety CI by pyup.io
# Safety is run only on Python >=3.6
# Safety 2.2.0 and dparse 0.6.2 fix safety issue 51358
safety>=2.2.0; python_version >= '3.6'
dparse>=0.6.2; python_version >= '3.6'

# Tox
tox>=2.5.0

# Sphinx (no imports, invoked via sphinx-build script):
# Sphinx 2.0.0 removed support for Python 2.7 and 3.4
# Sphinx 4.0.0 breaks autodocsumm and needs to be excluded
# Sphinx <4.3.0 requires docutils <0.18 due to an incompatibility
# Sphinx 3.0.4 fixes safety issues 45775,38330
Sphinx>=1.7.6,<2.0.0; python_version == '2.7'
Sphinx>=3.5.4,!=4.0.0,<4.3.0; python_version >= '3.5' and python_version <= '3.9'
Sphinx>=4.2.0; python_version >= '3.10'
docutils>=0.13.1,<0.17; python_version == '2.7'
docutils>=0.13.1; python_version >= '3.5' and python_version <= '3.9'
docutils>=0.14; python_version >= '3.10'
sphinx-git>=10.1.1
# GitPython 3.0.0 removed support for Python 2.7
# GitPython 3.1.30 fixes safety issues 52322,52518
GitPython>=2.1.1,<3.0.0; python_version == '2.7'
GitPython>=2.1.1; python_version >= '3.5' and python_version <= '3.6'
GitPython>=3.1.30; python_version >= '3.7'
sphinxcontrib-fulltoc>=1.2.0
sphinxcontrib-websupport>=1.1.2
# Pygments 2.7.4 fixes safety issues 50885,50886
Pygments>=2.1.3; python_version == '2.7'
Pygments>=2.7.4; python_version >= '3.5'
sphinx-rtd-theme>=0.5.0
autodocsumm>=0.1.13,<0.2.0; python_version == '2.7'
autodocsumm>=0.1.13; python_version >= '3.5' and python_version <= '3.9'
autodocsumm>=0.2.5; python_version >= '3.10'
# Babel 2.7.0 fixes an ImportError for MutableMapping which starts failing on Python 3.10
# Babel 2.9.1 fixes safety issue 42203
Babel>=2.9.1

# PyLint (no imports, invoked via pylint script)
# Pylint is not run on py27 anymore
# Pylint requires astroid
# Pylint 1.x / astroid 1.x supports py27 and py34/35/36
# Pylint 2.0 / astroid 2.0 removed py27, added py37
# Pylint 2.4 / astroid 2.3 removed py34
# Issue #2673: Pinning Pylint to <2.7.0 is a circumvention for Pylint issue
#   https://github.com/PyCQA/pylint/issues/4120 that appears in Pylint 2.7.0.
#   Pylint 2.10 has fixed the issue.
# Pylint 2.7.0 fixes safety issue 39621
# Pylint 2.13.0 fixes safety issue 45185
pylint>=2.5.2,<2.7.0; python_version == '3.5'
pylint>=2.13.0,<2.14.0; python_version == '3.6'
pylint>=2.13.0; python_version >= '3.7'
astroid>=2.4.0,<2.6.0; python_version == '3.5'
astroid>=2.11.0; python_version >= '3.6'
typed-ast>=1.4.0,<1.5.0; python_version >= '3.6' and python_version < '3.8' and implementation_name=='cpython'
# lazy-object-proxy is used by astroid
lazy-object-proxy>=1.4.3; python_version >= '3.5'
wrapt>=1.11.2; python_version >= '3.5'
# platformdirs is used by pylint starting with its 2.10
platformdirs>=2.2.0; python_version >= '3.6'

# Flake8 and dependents (no imports, invoked via flake8 script):
# flake8 4.0.0 fixes an AttributeError on Python 3.10.
flake8>=3.8.0; python_version <= '3.9'
flake8>=4.0.0; python_version >= '3.10'
mccabe>=0.6.0
pycodestyle>=2.6.0,<2.8.0; python_version == '2.7'
pycodestyle>=2.6.0; python_version >= '3.5' and python_version <= '3.9'
pycodestyle>=2.8.0; python_version >= '3.10'
pyflakes>=2.2.0,<2.4.0; python_version == '2.7'
pyflakes>=2.2.0; python_version >= '3.5' and python_version <= '3.9'
pyflakes>=2.4.0; python_version >= '3.10'
entrypoints>=0.3.0
functools32>=3.2.3.post2; python_version == '2.7'  # technically: python_version < '3.2'

# Twine (no imports, invoked via twine script):
# twine 2.0.0 removed support for Python < 3.6
# twine 2.0.0 fixes safety issue 37504
twine>=1.8.1,<2.0.0; python_version <= '3.5'
twine>=3.0.0; python_version >= '3.6'
# readme-renderer 23.0 has made cmarkgfm part of extras (it fails on Cygwin)
readme-renderer>=23.0
# twine uses keyring, and keyring requires pywin32-ctypes!=0.1.0,0.1.1 but 0.2.0 is required on py38+
pywin32-ctypes>=0.2.0; sys_platform=="win32"

# Jupyter Notebook (no imports, invoked via jupyter script):
# Note: The packages for Jupyter Notebook are prone to causing endless pip backtracking when
#       installed with minimum versions. This was addressed by pinning the package versions
#       to a maximum in order to reduce the search space for pip.
# Note: nbconvert 7.0.0 started using importlib-metadata and requires importlib-metadata>=3.6
#       which conflicts with flake8 (which still uses the deprecated interfaces importlib-metadata
#       removed). Therefore, we cannot currently use the latest versions of Jupyter Notebook
#       packages.
# Note: notebook 6.1 started using f-strings but requires py>=3.5 (f-strings were introduced in py36),
#       so we need to pin notebook to <6.1 on Python<=3.5.
# Note: notebook 6.5.1 starts using nbclassic which seems to introduce some challenges for pip
#       dependency resolution, so for now we pin notebook to <6.5.
# notebook 6.1.5 fixes safety issue 40380
notebook>=4.3.1,<6.1; python_version <= '3.5'
notebook>=4.3.1,<6.5; python_version >= '3.6'
jupyter>=1.0.0
jupyter-console>=5.2.0,<6.0.0; python_version == '2.7'
jupyter-console>=5.2.0,<6.0.0; python_version >= '3.5'
ipywidgets>=5.2.2,<6.0.0; python_version <= '3.6'
ipywidgets>=5.2.2,<6.0.0; python_version >= '3.7'
# nbconvert 6.5.1 fixes safety issue 50792
nbconvert>=5.0.0,<6.0.0; python_version <= '3.6'
nbconvert>=6.0.0,<7.0.0; python_version >= '3.7'
# nbconvert 6.x requires nbclient>=0.5.0,<0.6.0
nbclient>=0.5.9,<0.6.0; python_version == '3.6'
nbclient>=0.5.9,<0.6.0; python_version >= '3.7'
# nbclient 0.5.x requires nbformat>=5.0
nbformat>=4.2.0,<5.0.0; python_version <= '3.5'
nbformat>=5.0.2,<6.0.0; python_version >= '3.6'
qtconsole>=4.7.0; python_version <= '3.5'
qtconsole>=5.0.1; python_version == '3.6'
qtconsole>=5.4.0; python_version >= '3.7'
ipykernel>=4.5.2,<5.0.0; python_version <= '3.6'
ipykernel>=4.5.2,<5.0.0; python_version >= '3.7'
jupyter-client>=5.3.4,<6.0.0; python_version <= '3.5'
jupyter-client>=6.1.5,<7.0.0; python_version >= '3.6'
jupyterlab-widgets>=0.6.15,<1.0.0; python_version <= '3.5'
jupyterlab-widgets>=1.0.2,<2.0.0; python_version == '3.6'
jupyterlab-widgets>=1.0.2,<2.0.0; python_version >= '3.7'
jupyterlab-pygments>=0.1.0; python_version <= '3.6'
jupyterlab-pygments>=0.2.0; python_version >= '3.7'
jupyter-core>=4.2.1,<5.0.0; python_version <= '3.5'
jupyter-core>=4.6.1,<5.0.0; python_version >= '3.6'
ipython-genutils>=0.2.0
ipython>=5.1.0,<6.0; python_version <= '3.6'
ipython>=5.1.0,<6.0; python_version >= '3.7'

# Pywin32 is used (at least?) by jupyter.
# Pywin32 version 222 is inconsistent in its 32-bit/64-bit support on py37
# Pywin32 version 226 needs to be excluded, see issues #1946 and #1975.
# Note: Issue pywbem#2675: Pywin32 version 225+ provides wheel files for py38, but
#       does not have the supported Python versions in its package metadata.
#       That causes pywin32==225 to fail but pywin32>=225 to work.
#       Reported to pywin32 as https://github.com/mhammond/pywin32/issues/1448.
#       Addressed by increasing the minimum version of pywin32 to >=227 on Python >=3.8.
#       This error showed up again on Python 3.10 and could be circumvented by increasing
#       the minimum version to >=302 which supports Pyhton 3.10 as per its downloadable
#       files.
# Note: To circumvent https://github.com/pypa/pip/issues/10701,py3.10 was originally
#       excluded when the minimum version was 227. With a minimum version of 302, that
#       is no longer needed.
pywin32>=222,!=226; sys_platform == 'win32' and python_version == '2.7'
pywin32>=222,!=226; sys_platform == 'win32' and python_version >= '3.5' and python_version <= '3.6'
pywin32>=223,!=226; sys_platform == 'win32' and python_version == '3.7'
pywin32>=302; sys_platform == 'win32' and python_version >= '3.8'

# The tornado package is used by ipykernel which is used by jupyter.
# Tornado 5.0.0 and 5.0.1 rejects installation if the Python ssl module
# does not have certain symbols required by Tornado. This issue exists for
# example with Python 2.7.6 on Ubuntu 14.04, but not with Python 2.7.5 on
# RHEL 7.4. This can be checked with:
#   python -c "import ssl; ssl.SSLContext; ssl.create_default_context; ssl.match_hostname"
# Other projects have the same issue:
#   https://github.com/floydhub/dl-docker/issues/84
# The following is a circumvention of this issue that nails the tornado
# version to below 5.0 on Python 2.
# TODO: Follow up on resolution of this issue.
tornado>=4.0,<5.0; python_version == '2.7'
tornado>=6.0; python_version >= '3.5'

# pyzmq 17.0.0,17.1.0 fail installation when wheel is used
pyzmq>=17.1.3; python_version <= '3.5'
pyzmq>=23.0.0; python_version >= '3.6'

# Aditional dependencies of examples
tabulate>=0.8.1
progressbar2>=3.12.0

# Package dependency management tools (not used by any make rules)
pipdeptree>=2.2.0
# pip-check-reqs is not used on Python 2.7
# pip-check-reqs 2.3.2 is needed to have proper support for pip<21.3.
# pip-check-reqs 2.4.0 requires Python>=3.8.
# pip-check-reqs 2.4.3 fixes a speed issue on Python 3.11 and requires pip>=21.2.4
pip-check-reqs>=2.3.2; python_version >= '3.5' and python_version <= '3.7'
pip-check-reqs>=2.4.3; python_version >= '3.8'

# Indirect dependencies are not specified in this file unless constraints are needed.

# pywinpty is used by terminado <- notebook <- jupyter
# pywinpty <1.1.1 does not have metadata for required Python or dependent packages.
# pywinpty 1.0 has removed support for py27.
# pywinpty 1.0 requires maturin which requires py>=3.6 and on py>=3.7 it fails installation
pywinpty>=0.5,<1.0; os_name == "nt"
